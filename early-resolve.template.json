{
  "Transform": "AWS::Serverless-2016-10-31",
  "Resources": {
    "Transformer": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "Runtime": "nodejs14.x",
        "MemorySize": 256,
        "Timeout": 30,
        "Policies": [
          {
            "SSMParameterReadPolicy": {
              "ParameterName": "*"
            }
          }
        ],
        "InlineCode": "const AWS=require(\"aws-sdk\"),ssm=new AWS.SSM;let ssmCache;const asyncStringReplace=async(e,r,s)=>{const t=[];let a,n=0;for(;null!==(a=r.exec(e));)t.push(e.slice(n,a.index)),t.push(await s(...a)),n=r.lastIndex;return t.push(e.slice(n)),t.join(\"\")};function replaceParams(e,r){let s=e;for(const[e,t]of Object.entries(r))s=s.replace(`\\${${e}}`,t);return s}async function getSSMParameter(e){if(e in ssmCache)console.log(\"Using cached parameter\",e);else{let r;try{if(process.env.TEST)r=\"mocked\";else{r=(await ssm.getParameter({Name:e,WithDecryption:!0}).promise()).Parameter.Value}}catch(r){throw console.error(r),new Error(`Failed to resolve param: ${e}`)}ssmCache[e]=r}return ssmCache[e]}async function deepReplace(e,r){if(null===e||\"boolean\"==typeof e||\"number\"==typeof e)return e;if(\"string\"==typeof e)return await asyncStringReplace(e,/\\{\\{early-resolve:ssm:(.*?)\\}\\}/g,(async(e,s)=>{const t=replaceParams(s,r);return console.log(\"Resolving parameter:\",e,s,t),getSSMParameter(t)}));if(\"object\"==typeof e){for(const s in e)e[s]=await deepReplace(e[s],r);return e}return e}exports.handler=async(e,r)=>{try{ssmCache={},console.log(\"Parsing event:\",JSON.stringify(e));const r=e.fragment||{},s=e.templateParameterValues||{},t=await deepReplace(r,s);return{requestId:e.requestId,status:\"success\",fragment:t}}catch(r){return console.error(r),{requestId:e.requestId,status:\"failure\",errorMessage:r.message}}};"
      }
    },
    "Macro": {
      "Type": "AWS::CloudFormation::Macro",
      "Properties": {
        "Description": "Provides transform-time resolving of SSM parameters",
        "FunctionName": {
          "Ref": "Transformer"
        },
        "Name": "EarlyResolve"
      }
    },
    "MacroPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "Transformer"
        },
        "Principal": "cloudformation.amazonaws.com"
      }
    }
  }
}