{
  "Transform": "AWS::Serverless-2016-10-31",
  "Resources": {
    "Transformer": {
      "Type": "AWS::Serverless::Function",
      "Properties": {
        "Handler": "index.handler",
        "Runtime": "nodejs14.x",
        "MemorySize": 256,
        "Timeout": 30,
        "Policies": [
          {
            "SSMParameterReadPolicy": {
              "ParameterName": "*"
            }
          }
        ],
        "InlineCode": "const{SSMClient:SSMClient,GetParameterCommand:GetParameterCommand}=require(\"@aws-sdk/client-ssm\"),client=new SSMClient;let ssmCache;const replaceExpression=/\\{\\{(early-resolve|early-resolve-with-default):ssm:([^|]*)(\\|(.*))?\\}\\}/g,asyncStringReplace=async(e,r,t)=>{const a=[];let s,n=0;for(;null!==(s=r.exec(e));)a.push(e.slice(n,s.index)),a.push(await t(...s)),n=r.lastIndex;return a.push(e.slice(n)),a.join(\"\")};function replaceParams(e,r){let t=e;for(const[e,a]of Object.entries(r))t=t.replace(`\\${${e}}`,a);return t}async function getSSMParameter(e){if(e in ssmCache)console.log(\"Using cached parameter\",e);else{let r;try{if(process.env.TEST){if(e.includes(\"default-resolve\"))throw new Error(`Could not find ${e} in SSM`);r=\"mocked\"}else{r=(await client.send(new GetParameterCommand({Name:e,WithDecryption:!0}))).Parameter.Value}}catch(r){throw console.warn(r),new Error(`Failed to resolve param: ${e}`)}ssmCache[e]=r}return ssmCache[e]}async function deepReplace(e,r){if(null===e||\"boolean\"==typeof e||\"number\"==typeof e)return e;if(\"string\"==typeof e)return await asyncStringReplace(e,replaceExpression,(async(e,t,a,s,n)=>{try{const t=replaceParams(a,r);return console.log(\"Resolving parameter:\",e,a,t),await getSSMParameter(t)}catch(e){if(\"early-resolve-with-default\"===t)return n||\"\";throw e}}));if(\"object\"==typeof e){for(const t in e)e[t]=await deepReplace(e[t],r);return e}return e}exports.handler=async(e,r)=>{try{ssmCache={},console.log(\"Parsing event:\",JSON.stringify(e));const r=e.fragment||{},t=e.templateParameterValues||{},a=await deepReplace(r,t);return{requestId:e.requestId,status:\"success\",fragment:a}}catch(r){return console.error(r),{requestId:e.requestId,status:\"failure\",errorMessage:r.message}}};"
      }
    },
    "Macro": {
      "Type": "AWS::CloudFormation::Macro",
      "Properties": {
        "Description": "Provides transform-time resolving of SSM parameters",
        "FunctionName": {
          "Ref": "Transformer"
        },
        "Name": "EarlyResolve"
      }
    },
    "MacroPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "Action": "lambda:InvokeFunction",
        "FunctionName": {
          "Ref": "Transformer"
        },
        "Principal": "cloudformation.amazonaws.com"
      }
    }
  }
}